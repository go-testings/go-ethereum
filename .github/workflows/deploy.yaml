name: Deploy
on:
  pull_request:
    types: [closed]
    branches:
      - master
jobs:
  build:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CI:Deploy')
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: set tags
        id: set_tags
        run: |
          BRANCH="${{github.event.pull_request.base.ref}}"
          TAG=$(echo "${{github.sha}}" | cut -c 1-7)

          echo "DEVNET=ghcr.io/${{ github.repository }}:${BRANCH}-devnet-latest, ghcr.io/${{ github.repository }}:${BRANCH}-devnet-${TAG}" >> $GITHUB_ENV

      - name: set up Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push DEVNET
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./ci/Dockerfile.devnet
          tags: ${{ env.DEVNET }}
          push: true
          labels: |
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/go-ethereum}}
          build-args: |
            COMMIT=${{ github.sha }}
            VERSION=${{ github.sha }}
            
  test:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CI:Deploy')
    name: Test
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set image tag
        id: set_image_tag
        run: |
          BRANCH="${{github.event.pull_request.base.ref}}"
          TAG=$(echo "${{github.sha}}" | cut -c 1-7)
          echo "IMAGE_TAG=ghcr.io/${{ github.repository }}:${BRANCH}-devnet-${TAG}" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull Docker image
        run: docker pull ${{ env.IMAGE_TAG }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './hardhat/package-lock.json'
      
      - name: Install Hardhat dependencies
        working-directory: ./hardhat
        run: npm ci
      
      - name: Start Docker container
        run: |
          docker run -d --name ethereum-node -p 8545:8545 -p 8546:8546 ${{ env.IMAGE_TAG }}
          # Wait for the node to start
          sleep 10
      
      - name: Run Hardhat tests against container
        working-directory: ./hardhat
        run: |
          # Update hardhat.config.js to point to the Docker container
          cat > hardhat.config.js << 'EOL'
          require("@nomicfoundation/hardhat-toolbox");
          
          /** @type import('hardhat/config').HardhatUserConfig */
          module.exports = {
            solidity: "0.8.28",
            networks: {
              dockernode: {
                url: "http://localhost:8545",
                timeout: 30000
              }
            }
          };
          EOL
          
          # Run tests against the Docker container
          npx hardhat test --network dockernode
      
      - name: Cleanup
        if: always()
        run: docker stop ethereum-node || true